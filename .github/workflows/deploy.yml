name: Build and Deploy to AWS

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 레포지토리 클론
      - name: Checkout code
        uses: actions/checkout@v2

      # 2. Gradlew 파일에 실행 권한 추가
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # 3. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: '17'

      # 4. 환경 변수 설정
      - name: Set up environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      # 5. Gradle 테스트 생략 및 빌드 실행
      - name: Build without tests
        run: ./gradlew assemble

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build Docker image
        run: docker build -t guni976/drug-track .

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push Docker image
        run: docker push guni976/drug-track

      # 7. AWS 인스턴스에 SSH 접속 및 Docker 업데이트
      - name: SSH to AWS and update Docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}  # EC2 퍼블릭 IP 또는 도메인
          username: ${{ secrets.AWS_USERNAME }}  # 보통 ubuntu
          key: ${{ secrets.AWS_SSH_KEY }}  # GitHub Secrets에 저장된 개인 키
          script: |
            cd /path/to/docker-compose-directory
            docker-compose pull
            docker-compose up -d
            docker system prune -a --volumes -f
